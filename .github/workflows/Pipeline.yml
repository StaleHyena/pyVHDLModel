name: Unit Testing, Coverage Collection, Package, Release, Documentation and Publish

on: 
  push:
  workflow_dispatch:

jobs:

  UnitTesting:
    uses: pyTooling/Actions/.github/workflows/UnitTesting.yml@dev
    with:
      TestReport: true

  Coverage:
    uses: pyTooling/Actions/.github/workflows/CoverageCollection.yml@dev
    with:
      pyver: '3.10'
      artifact: pyVHDLModel-coverage
    secrets:
      codacy_token: ${{ secrets.CODACY_PROJECT_TOKEN }}

  Release:
    uses: pyTooling/Actions/.github/workflows/Release.yml@dev
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - UnitTesting
      - Coverage

  Package:
    uses: pyTooling/Actions/.github/workflows/Package.yml@dev
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - Coverage
    with:
      pyver: '3.10'
      artifact: pyVHDLModel-wheel

  PublishOnPyPI:
    name: üöÄ Publish to PyPI
    runs-on: ubuntu-latest

    if: startsWith(github.ref, 'refs/tags')
    needs:
      - Package

    env:
      PYTHON:   ${{ needs.Package.outputs.python }}
      ARTIFACT: ${{ needs.Package.outputs.artifact }}
    outputs:
      python:   ${{ env.PYTHON }}
      artifact: ${{ env.ARTIFACT }}

    steps:
      - name: üì• Download artifacts '${{ env.ARTIFACT }}' from 'Package' job
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT }}
          path: dist/

      - name: üêç Setup Python ${{ env.PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - name: ‚öô Install dependencies for packaging and release
        run: |
          python -m pip install --upgrade pip
          pip install wheel twine

      - name: ‚§¥ Release Python package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*

  VerifyDocs:
    name: üëç Verify example snippets using Python 3.9
    runs-on: ubuntu-latest

    env:
      PYTHON: 3.9
    outputs:
      python: ${{ env.PYTHON }}

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v2

      - name: ‚öô Setup GHDL
        uses: ghdl/setup-ghdl-ci@master

      - name: üêç Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - name: üêç Install dependencies
        run: |
          pip3 install git+https://github.com/ghdl/ghdl.git@$(ghdl version hash)

      - name: ‚úÇ Extract code snippet from README
        shell: python
        run: |
          from pathlib import Path
          import re

          ROOT = Path('.')

          with (ROOT / 'README.md').open('r') as rptr:
              content = rptr.read()

          m = re.search(r"```py(thon)?(?P<code>.*?)```", content, re.MULTILINE|re.DOTALL)

          if m is None:
              raise Exception("Regular expression did not find the example in the README!")

          with (ROOT / 'tests/docs/example.py').open('w') as wptr:
              wptr.write(m["code"])

#      - name: Print example.py
#        run: cat tests/docs/example.py

      - name: ‚òë Run example snippet
        working-directory: tests/docs
        run: |
          python3 example.py


  BuildTheDocs:
    name: üìì Run BuildTheDocs and publish to GH-Pages
    runs-on: ubuntu-latest

    needs:
      - VerifyDocs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: üö¢ Build container image 'vhdl/doc'
        run: |
          docker build -t vhdl/doc - <<-EOF
          FROM btdi/sphinx:featured
          RUN apk add -U --no-cache graphviz
          EOF

      - name: üõ≥Ô∏è Build documentation using container vhdl/doc and publish to GitHub Pages
        uses: buildthedocs/btd@v0
        with:
          token: ${{ github.token }}

      - name: üì§ Upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: doc
          path: doc/_build/html

  ArtifactCleanUp:
    name: üóëÔ∏è Artifact Cleanup
    runs-on: ubuntu-latest

    needs:
      - Package
      - PublishOnPyPI

    env:
      ARTIFACT: ${{ needs.Package.outputs.artifact }}

    steps:
      - name: üóëÔ∏è Delete all Artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            ${{ env.ARTIFACT }}
