name: Pipeline

on:
  push:
  workflow_dispatch:

jobs:

  Params:
    uses: pyTooling/Actions/.github/workflows/Params.yml@r0
    with:
      name: pyVHDLModel

  UnitTesting:
    uses: pyTooling/Actions/.github/workflows/UnitTesting.yml@r0
    needs:
      - Params
    with:
      jobs: ${{ needs.Params.outputs.python_jobs }}
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}

  Coverage:
    uses: pyTooling/Actions/.github/workflows/CoverageCollection.yml@r0
    needs:
      - Params
    with:
      python_version: ${{ fromJson(needs.Params.outputs.params).python_version }}
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.coverage }}
    secrets:
      codacy_token: ${{ secrets.CODACY_PROJECT_TOKEN }}

  Package:
    uses: pyTooling/Actions/.github/workflows/Package.yml@r0
    needs:
      - Params
      - Coverage
    with:
      python_version: ${{ fromJson(needs.Params.outputs.params).python_version }}
      requirements: -r build/requirements.txt
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.package }}

  Release:
    uses: pyTooling/Actions/.github/workflows/Release.yml@r0
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - UnitTesting
      - Coverage
      - Package

  PublishOnPyPI:
    uses: pyTooling/Actions/.github/workflows/PublishOnPyPI.yml@r0
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - Params
      - Release
      - Package
    with:
      python_version: ${{ fromJson(needs.Params.outputs.params).python_version }}
      requirements: -r dist/requirements.txt
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.package }}
    secrets:
      PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

  VerifyDocs:
    needs:
      - Params
    name: üëç Verify example snippets using Python ${{ fromJson(needs.Params.outputs.params).python_version }}
    runs-on: ubuntu-latest

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v2

      - name: ‚öô Setup GHDL
        uses: ghdl/setup-ghdl-ci@master

      - name: üêç Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ fromJson(needs.Params.outputs.params).python_version }}

      - name: üêç Install dependencies
        run: |
          pip3 install git+https://github.com/ghdl/ghdl.git@$(ghdl version hash)

      - name: ‚úÇ Extract code snippet from README
        shell: python
        run: |
          from pathlib import Path
          import re

          ROOT = Path('.')

          with (ROOT / 'README.md').open('r') as rptr:
              content = rptr.read()

          m = re.search(r"```py(thon)?(?P<code>.*?)```", content, re.MULTILINE|re.DOTALL)

          if m is None:
              raise Exception("Regular expression did not find the example in the README!")

          with (ROOT / 'tests/docs/example.py').open('w') as wptr:
              wptr.write(m["code"])

#      - name: Print example.py
#        run: cat tests/docs/example.py

      - name: ‚òë Run example snippet
        working-directory: tests/docs
        run: |
          python3 example.py

  BuildTheDocs:
    uses: pyTooling/Actions/.github/workflows/BuildTheDocs.yml@r0
    needs:
      - Params
      - VerifyDocs
    with:
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.doc }}

  PublishToGitHubPages:
    uses: pyTooling/Actions/.github/workflows/PublishToGitHubPages.yml@r0
    needs:
      - Params
      - BuildTheDocs
      - Coverage
    with:
      doc: ${{ fromJson(needs.Params.outputs.params).artifacts.doc }}
      coverage: ${{ fromJson(needs.Params.outputs.params).artifacts.coverage }}

  ArtifactCleanUp:
    uses: pyTooling/Actions/.github/workflows/ArtifactCleanUp.yml@r0
    needs:
      - Params
      - UnitTesting
      - Coverage
      - BuildTheDocs
      - PublishToGitHubPages
    with:
      package: ${{ fromJson(needs.Params.outputs.params).artifacts.package }}
      remaining: |
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-*
        ${{ fromJson(needs.Params.outputs.params).artifacts.typing }}
        ${{ fromJson(needs.Params.outputs.params).artifacts.doc }}
